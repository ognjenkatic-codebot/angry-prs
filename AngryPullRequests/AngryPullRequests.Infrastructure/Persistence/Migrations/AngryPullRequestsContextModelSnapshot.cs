// <auto-generated />
using System;
using AngryPullRequests.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AngryPullRequests.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AngryPullRequestsContext))]
    partial class AngryPullRequestsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.AngryUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("GithubPat")
                        .HasColumnType("text")
                        .HasColumnName("github_pat");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AngryUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("angry_user_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_repositories");

                    b.HasIndex("AngryUserId")
                        .HasDatabaseName("ix_repositories_angry_user_id");

                    b.ToTable("repositories", (string)null);
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.RunSchedule", b =>
                {
                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.Property<int[]>("DaysOfWeek")
                        .HasColumnType("integer[]")
                        .HasColumnName("days_of_week");

                    b.Property<TimeOnly>("TimeOfDay")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_of_day");

                    b.HasKey("RepositoryId")
                        .HasName("pk_run_schedules");

                    b.ToTable("run_schedules", (string)null);
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.Repository", b =>
                {
                    b.HasOne("AngryPullRequests.Domain.Entities.AngryUser", "AngryUser")
                        .WithMany("Repositories")
                        .HasForeignKey("AngryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repositories_users_angry_user_id");

                    b.Navigation("AngryUser");
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.RunSchedule", b =>
                {
                    b.HasOne("AngryPullRequests.Domain.Entities.Repository", "Repository")
                        .WithOne("RunSchedule")
                        .HasForeignKey("AngryPullRequests.Domain.Entities.RunSchedule", "RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_run_schedules_repositories_repository_id");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.AngryUser", b =>
                {
                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.Repository", b =>
                {
                    b.Navigation("RunSchedule");
                });
#pragma warning restore 612, 618
        }
    }
}
