// <auto-generated />
using System;
using AngryPullRequests.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AngryPullRequests.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AngryPullRequestsContext))]
    [Migration("20230420185311_AddMoreMetrics")]
    partial class AddMoreMetrics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.AngryUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("GithubAvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("github_avatar_url");

                    b.Property<string>("GithubPat")
                        .HasColumnType("text")
                        .HasColumnName("github_pat");

                    b.Property<string>("GithubProfile")
                        .HasColumnType("text")
                        .HasColumnName("github_profile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.Contributor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("GithubUsername")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("github_username");

                    b.HasKey("Id")
                        .HasName("pk_contributors");

                    b.ToTable("contributors", (string)null);
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AngryUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("angry_user_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Owner")
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.HasKey("Id")
                        .HasName("pk_repositories");

                    b.HasIndex("AngryUserId")
                        .HasDatabaseName("ix_repositories_angry_user_id");

                    b.ToTable("repositories", (string)null);
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.RepositoryCharacteristics", b =>
                {
                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.Property<float>("DeleteHeavyRatio")
                        .HasColumnType("real")
                        .HasColumnName("delete_heavy_ratio");

                    b.Property<string>("InProgressLabel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("in_progress_label");

                    b.Property<int>("InactivePrAgeInDays")
                        .HasColumnType("integer")
                        .HasColumnName("inactive_pr_age_in_days");

                    b.Property<string>("IssueBaseUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issue_base_url");

                    b.Property<string>("IssueRegex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issue_regex");

                    b.Property<int>("LargePrChangeCount")
                        .HasColumnType("integer")
                        .HasColumnName("large_pr_change_count");

                    b.Property<int>("OldPrAgeInDays")
                        .HasColumnType("integer")
                        .HasColumnName("old_pr_age_in_days");

                    b.Property<string>("PullRequestNameCaptureRegex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pull_request_name_capture_regex");

                    b.Property<string>("PullRequestNameRegex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pull_request_name_regex");

                    b.Property<string>("ReleaseTagRegex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("release_tag_regex");

                    b.Property<string>("SlackApiToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slack_api_token");

                    b.Property<string>("SlackNotificationChannel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slack_notification_channel");

                    b.Property<int>("SmallPrChangeCount")
                        .HasColumnType("integer")
                        .HasColumnName("small_pr_change_count");

                    b.HasKey("RepositoryId")
                        .HasName("pk_repository_characteristics");

                    b.ToTable("repository_characteristics", (string)null);
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.RepositoryContributor", b =>
                {
                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.Property<Guid>("ContributorId")
                        .HasColumnType("uuid")
                        .HasColumnName("contributor_id");

                    b.Property<int>("ApprovalCount")
                        .HasColumnType("integer")
                        .HasColumnName("approval_count");

                    b.Property<int>("ChangeRequestCount")
                        .HasColumnType("integer")
                        .HasColumnName("change_request_count");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer")
                        .HasColumnName("comment_count");

                    b.Property<DateTimeOffset?>("FirstMergeAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_merge_at");

                    b.Property<DateTimeOffset?>("FirstReviewAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_review_at");

                    b.Property<DateTimeOffset?>("LastMergeAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_merge_at");

                    b.Property<DateTimeOffset?>("LastReviewAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_review_at");

                    b.Property<int?>("MergedPullRequestCount")
                        .HasColumnType("integer")
                        .HasColumnName("merged_pull_request_count");

                    b.Property<int?>("ReviewedPullRequestCount")
                        .HasColumnType("integer")
                        .HasColumnName("reviewed_pull_request_count");

                    b.HasKey("RepositoryId", "ContributorId")
                        .HasName("pk_repository_contributors");

                    b.HasIndex("ContributorId")
                        .HasDatabaseName("ix_repository_contributors_contributor_id");

                    b.ToTable("repository_contributors", (string)null);
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.RunSchedule", b =>
                {
                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.Property<int[]>("DaysOfWeek")
                        .HasColumnType("integer[]")
                        .HasColumnName("days_of_week");

                    b.Property<TimeOnly>("TimeOfDay")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_of_day");

                    b.HasKey("RepositoryId")
                        .HasName("pk_run_schedules");

                    b.ToTable("run_schedules", (string)null);
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.Repository", b =>
                {
                    b.HasOne("AngryPullRequests.Domain.Entities.AngryUser", "AngryUser")
                        .WithMany("Repositories")
                        .HasForeignKey("AngryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repositories_users_angry_user_id");

                    b.Navigation("AngryUser");
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.RepositoryCharacteristics", b =>
                {
                    b.HasOne("AngryPullRequests.Domain.Entities.Repository", "Repository")
                        .WithOne("Characteristics")
                        .HasForeignKey("AngryPullRequests.Domain.Entities.RepositoryCharacteristics", "RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_characteristics_repositories_repository_id");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.RepositoryContributor", b =>
                {
                    b.HasOne("AngryPullRequests.Domain.Entities.Contributor", "Contributor")
                        .WithMany("Contributions")
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_contributors_contributors_contributor_id");

                    b.HasOne("AngryPullRequests.Domain.Entities.Repository", "Repository")
                        .WithMany("Contributions")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_contributors_repositories_repository_id");

                    b.Navigation("Contributor");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.RunSchedule", b =>
                {
                    b.HasOne("AngryPullRequests.Domain.Entities.Repository", "Repository")
                        .WithOne("RunSchedule")
                        .HasForeignKey("AngryPullRequests.Domain.Entities.RunSchedule", "RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_run_schedules_repositories_repository_id");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.AngryUser", b =>
                {
                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.Contributor", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("AngryPullRequests.Domain.Entities.Repository", b =>
                {
                    b.Navigation("Characteristics");

                    b.Navigation("Contributions");

                    b.Navigation("RunSchedule");
                });
#pragma warning restore 612, 618
        }
    }
}
